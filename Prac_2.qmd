---
title: "Practical 2"
---

```{r echo=FALSE, results='hide', warning=FALSE, message=FALSE}
library(ggplot2)
```
## Question One
Generate Simulated Data
```{r}
set.seed(1)
# generate a sequence of numbers from 1 - 100
x <- runif(100, min=0, max=100)
# ei ~ N(0, 0.2)
e <- rnorm(100, mean = 0, sd = 0.2)
# generate y as a noisy sine wave
y <- sin(x / 10) + e 
```

## Question Two
Implement the LOWESS Algorithm
```{r}
customLowess <- function(x, y, f) {
  n <- length(x) # set n to the number of x values
  k <- ceiling(f*n) # number of closest neighbours used for xi
  y_hat <- numeric(n) # create space for smoothed y values
  
  distances_matrix <- abs(outer(x,x, "-")) # calculate the distance between xj and xi
  
  neighbours <- apply(distances_matrix, 1, function(d) order(d)[1:k])
  d_max <- apply(distances_matrix, 1, function(d) max(d[order(d)[1:k]]))
  weights_matrix <- (1-(distances_matrix / d_max)^3)^3
  weights_matrix[distances_matrix > d_max] <- 0
  
  X <- cbind(1, x)
  y_hat <- sapply(1:n, function(i){
    neighbour <- neighbours[, i]
    W <- diag(weights_matrix[i, neighbour])
    X_subset <- X[neighbour, ,drop=FALSE]
    Y_subset <- y[neighbour]
    
    beta <- solve( t(X_subset)%*%W%*%X_subset ) %*% t(X_subset)%*%W%*%Y_subset
    
    return(beta[1]+beta[2]*x[i])
  })
  return(y_hat)
}

y_smooth <- customLowess(x, y, f=0.2)
```

## Question Three
Comparing with R's built in 'lowess()' function
```{r message=FALSE, warning=FALSE}
# Question 3: Comparing with R's built in 'lowess()' function 
builtin_lowess <- lowess(x, y, f=0.2, iter=0)

```


## Plot of all questions
```{r echo= FALSE, warning=FALSE, message=FALSE}

# Ensure x is sorted before plotting
sorted_indices <- order(x)
x_sorted <- x[sorted_indices]
y_smooth_sorted <- y_smooth[sorted_indices]

# Create a data frame for plotting
df <- data.frame(x = x, y = y, y_smooth = y_smooth, 
                 y_builtin = builtin_lowess$y)
# Plot results using ggplot
ggplot(df, aes(x = x, y = y)) + 
  geom_point(aes(color = "Original Data"), size = 2) +  # Scatter plot for original data
  geom_line(aes(x = x_sorted, y = y_smooth_sorted, color = "Custom LOWESS"), size = 1.5) +  # Custom LOWESS line
  geom_line(aes(x = x_sorted, y = y_builtin, color = "R's LOWESS"), size = 1.5, linetype = "dashed") +  # R lowess() line
  labs(title = "Custom LOWESS Smoothing vs R's lowess()") + 
  theme_minimal() + 
  theme(legend.position = "top") + 
  scale_color_manual(values = c("Original Data" = "blue", 
                                "Custom LOWESS" = "green", 
                                "R's LOWESS" = "red")) + 
  guides(color = guide_legend(title = "Legend"))

```

