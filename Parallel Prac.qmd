---
title: "Parallel Practical"
author: "Shane Silverman"
format: html
---

This webpage contains Shane Silverman's answers to the ***Assignment 2 *** from **Statistical Computing 2025**.

Here is a link to the git repo: [Shane Silverman_GITHUB](https://github.com/slvsha002/Practicals)

# Question 1

```{r}
library(foreach)
library(knitr)
samples <- numeric(100)
samples <- foreach(i = 1:100, .combine = c) %do% {
  samples[i] <- rexp(1, rate = 1)
}
mean <- mean(samples)
var <- var(samples)
results <- rbind(mean, var)
kable(results)
```

# Question 2

```{r}
#| message: false
#| warning: false
library(MASS)
library(foreach)
library(doParallel)
library(knitr)
med_obs <- median(galaxies)
set.seed(123)

#loop 10 times, increasing bootstrap samples by 1000 each time
bootstrap_sizes <- seq(1000, 10000, by = 1000)
results <- data.frame(
  Bootstrap_Size = integer(),
  Parallel_Elapsed_Time = numeric(),
  Sequential_Elapsed_Time = numeric()
)
for(B in bootstrap_sizes){
  boot_med <- numeric(B)
  # Parallel bootstrapping
  cl <- makeCluster(3)
  registerDoParallel(cl)
  parallel <- system.time({
    foreach(i = 1:B, .combine = c, .packages='MASS') %dopar% {
      samples <- sample(1:length(galaxies), replace = TRUE)
      boot_med[i] <- median(samples) 
    }
  })
  # Sequential bootstrapping
  sequential <- system.time({
    foreach(i = 1:B, .combine = c, .packages='MASS') %do% {
      samples <- sample(1:length(galaxies), replace = TRUE)
      boot_med[i] <- median(samples)
    }
  })
  
  results <- rbind(results, data.frame(
    Bootstrap_Size = B,
    Parallel_Elapsed_Time = parallel["elapsed"],
    Sequential_Elapsed_Time = sequential["elapsed"]
  ))
}

# Stop cluster
stopCluster(cl)

row.names(results) <- NULL #remove row names before printing in table
kable(results)
```

Parallel time is nearly (if not always) slower than sequential time for this given problem.

# Question 3

```{r}
n <- 50
true_mean <- 1
set.seed(123)
B <- 1000

# Parallel bootstrapping
cl <- makeCluster(3)
registerDoParallel(cl)

results <- 
  foreach(i = 1:n, .combine = c) %dopar% {
    sample_data <- rexp(n, rate = 1)
    boot_means <- replicate(B, {
      boot_sample <- sample(sample_data, size = n, replace = TRUE)
      mean(boot_sample)
    })
    pci <- quantile(boot_means, c(0.025, 0.975))
    as.integer(true_mean >= pci[1] && true_mean <= pci[2])
    }
stopCluster(cl)

coverage_rate <- mean(results)

cat("Coverage of a percentile bootstrap confidence interval is:", coverage_rate)
```

# Question 4

```{r}
#| message: false
#| warning: false
# Load required packages
library(foreach)
library(iterators)
library(doParallel)
library(knitr)

cl <- makeCluster(2)
registerDoParallel(cl)
set.seed(1234)
# Create an iterator that generates 3 vectors of 5 random normal values and use it in the foreach
max_values <- foreach(vec = irnorm(n = 5, count = 3), .combine = c) %dopar% {
  max(vec)
}

results <- data.frame(MaxValues = max_values)
stopCluster(cl)
kable(results)
```

# Question 5
```{r}
#| message: false
#| warning: false
library(foreach)
library(iterators)
library(doParallel)
library(knitr)

# Clean start
closeAllConnections()
cl <- makeCluster(2)
registerDoParallel(cl)

# parLapply using irnorm
set.seed(1234)
parLapply_time <- system.time({
  it_parL <- irnorm(n = 5, count = 3)
  vec_list <- list()
  for (i in 1:3) {
    vec_list[[i]] <- nextElem(it_parL)
  }
  result_parL <- parLapply(cl, vec_list, function(vec) {
    max(vec)
  })
})

#foreach
set.seed(1234)
for_each_time <- system.time({
  foreach(vec_fe = irnorm(n = 5, count = 3), .combine = c) %dopar% {
    max(vec_fe)
    }
  })

#replicate
set.seed(1234)
replicate_time <- system.time({
  it_rep <- irnorm(n=5, count=3)
  result_rep <- replicate(3, {
    vec_rep <- nextElem(it_rep)
    max(vec_rep)
  })
  })

results <- data.frame(parLapply = parLapply_time,
                      for_each = for_each_time,
                      replicate = replicate_time)

results_t <- as.data.frame(t(results))
colnames(results_t) <- c("user", "system", "elapsed")
kable(round(results_t[, 1:3], 4))

```
